/*
 * Copyright (c) 2013-2019 Metin Kale
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        jcenter()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.2'
        classpath 'com.google.gms:google-services:4.3.4'
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.4.1'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}
allprojects {
    repositories {
        mavenLocal()
        google()
        jcenter()
        maven { url "https://jitpack.io" }
        maven { url "https://maven.google.com" }
    }
}

task uploadCrowdin(type: Exec) {
    commandLine 'java', '-jar', 'crowdin-cli.jar', 'upload'
}

task downloadCrowdin(type: Exec) {
    commandLine 'java', '-jar', 'crowdin-cli.jar', 'download'
}

task updateCrowdinInfo() {
    def crowdinkey = ""
    file("crowdin.yml").eachLine { line ->
        if (line.contains("api_key")) {
            line = line.substring(line.indexOf(":"))
            line = line.substring(line.indexOf("\"") + 1)
            crowdinkey = line.substring(0, line.indexOf("\""))
        }
    }
    def lang
    def progress
    if (true) return;
    file("features/base/src/main/res/values/languages.xml").withWriter { out ->
        out.println "<?xml version=\"1.0\" encoding=\"utf-8\"?>"
        out.println "<resources translatable=\"false\">"
        out.println "    <string-array name=\"languages\">"

        new URL('https://api.crowdin.com/api/project/prayer-times-android/status?key=' + crowdinkey).eachLine { line ->
            if (line.contains("<code>")) {
                lang = line.substring(line.indexOf(">") + 1)
                lang = lang.substring(0, lang.indexOf("<"))
            }
            if (line.contains("<translated_progress>")) {
                progress = line.substring(line.indexOf(">") + 1)
                progress = progress.substring(0, progress.indexOf("<"))

                if (progress != "0") {
                    out.println "        <item>" + lang + "|" + progress + "</item>"
                }
            }
        }

        out.println "    </string-array>"
        out.println "</resources>"
    }
}


task findDuplicateStrings {
    doLast {
        def resources = [:]
        new File("features").eachFile { feature ->
            def values = new File(feature, "src/main/res/values/strings.xml")
            if (!values.exists()) return
            values.eachLine { line ->
                def search = "<string name=\""
                if (line.contains(search)) {
                    def name = line.substring(line.indexOf(search) + search.length())
                    name = name.substring(0, name.indexOf("\""))
                    def value = line.substring(line.indexOf(">") + 1)
                    if (value.contains("<"))
                        value = value.substring(0, value.indexOf("<"))

                    if (resources.containsKey(name)) {
                        System.err.printf("[findDuplicateStrings] String %s (%s) in %s also exists in %s\n", name, value, feature.getName(),
                                resources.get(name))
                    } else {
                        resources.put(name, feature.getName())
                    }
                }
            }
        }
    }
}

task findDuplicateResources {
    doLast {
        def resources = [:]
        new File("features").eachFile { feature ->
            def res = new File(feature, "src/main/res/")
            if (!res.exists()) return
            res.eachFile { file ->
                if (file.name.startsWith("values")) return
                file.eachFile { r ->
                    def name = r.name
                    if (resources.containsKey(name) && resources.get(name) != feature.getName()) {
                        System.err.printf("[findDuplicateResources] String %s in %s also exists in %s\n", name, feature.getName(),
                                resources.get(name))
                    } else {
                        resources.put(name, feature.getName())
                    }
                }

            }
        }
    }
}


dependencies {

}